/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryResponse =
  | {
      contest_data: ContestDataResponse;
    }
  | {
      contest_data_list: ContestDataListResponse;
    }
  | {
      user_bet: UserBetResponse;
    }
  | {
      users_bets: UsersBetsResponse;
    }
  | {
      minimum_bet: MinimumBetResponse;
    }
  | {
      snip20: GetSnip20Response;
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;

export interface ContestDataResponse {
  contest_bet_summary: ContestBetSummary;
  contest_info: ContestInfo;
  [k: string]: unknown;
}
export interface ContestBetSummary {
  contest_id: string;
  options: OptionBetSummary[];
  outcome?: ContestOutcome | null;
  [k: string]: unknown;
}
export interface OptionBetSummary {
  bet_allocation: Uint128;
  num_bets: number;
  option: ContestOutcome;
  [k: string]: unknown;
}
export interface ContestOutcome {
  id: number;
  name: string;
  [k: string]: unknown;
}
export interface ContestInfo {
  event_details: string;
  id: string;
  options: ContestOutcome[];
  time_of_close: number;
  time_of_resolve: number;
  [k: string]: unknown;
}
export interface ContestDataListResponse {
  contests: ContestDataResponse[];
  [k: string]: unknown;
}
export interface UserBetResponse {
  bet: Bet;
  [k: string]: unknown;
}
export interface Bet {
  amount: Uint128;
  contest_id: string;
  has_been_paid: boolean;
  outcome_id: number;
  user: Addr;
  [k: string]: unknown;
}
export interface UsersBetsResponse {
  contests_bets: UserContestBetInfo[];
  [k: string]: unknown;
}
export interface UserContestBetInfo {
  contest_bet_summary: ContestBetSummary;
  contest_info: ContestInfo;
  user_bet: Bet;
  [k: string]: unknown;
}
export interface MinimumBetResponse {
  minimum_bet: Uint128;
  [k: string]: unknown;
}
export interface GetSnip20Response {
  snip20: ContractInfo;
  [k: string]: unknown;
}
export interface ContractInfo {
  address: Addr;
  code_hash?: string;
  [k: string]: unknown;
}
