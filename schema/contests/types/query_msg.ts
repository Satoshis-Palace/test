/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryMsg =
  | {
      get_contest: GetContest;
    }
  | {
      get_contests: GetContests;
    }
  | {
      get_active_contests: GetActiveContests;
    }
  | {
      get_user_bet: GetUserBet;
    }
  | {
      get_users_bets: GetUsersBets;
    }
  | {
      get_min_bet: GetMinBet;
    }
  | {
      get_snip20: GetSnip20;
    };
export type ContestQuerySortOrder = "volume";
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
export type UsersBetsQueryFilters = "claimable";

export interface GetContest {
  contest_id: string;
  [k: string]: unknown;
}
export interface GetContests {
  contest_ids: string[];
  [k: string]: unknown;
}
export interface GetActiveContests {
  page_num?: number | null;
  page_size?: number | null;
  sort_order?: ContestQuerySortOrder | null;
  [k: string]: unknown;
}
export interface GetUserBet {
  contest_id: string;
  user: Addr;
  viewing_key: string;
  [k: string]: unknown;
}
export interface GetUsersBets {
  filters?: UsersBetsQueryFilters[] | null;
  user: Addr;
  viewing_key: string;
  [k: string]: unknown;
}
export interface GetMinBet {
  [k: string]: unknown;
}
export interface GetSnip20 {
  [k: string]: unknown;
}
